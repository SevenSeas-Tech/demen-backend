// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// * --- models ----------------------------------------------------------- * //

// ? --- Prisma does not support multiple files for models yet ------------ ? //
// TODO: When it does, change it to multiple files. ------------------------- //

// ? --- Prisma generates the uuid - to make it generate on postgres use:
// ? --- id String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid

// *** --- management --------------------------------------------------- *** //

model Email {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @db.VarChar(50)
  userId    String   @map("user_id") @db.Uuid
  typeId    String   @map("type_id") @db.Uuid
  verified  Boolean  @default(false) @db.Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  emailType EmailType @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user      Manager   @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("emails")
}

// -------------------------------------------------------------------------- //

model EmailType {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(15)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()
  email     Email[]

  @@map("email_types")
}

// -------------------------------------------------------------------------- //

model Manager {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(15)
  lastName  String   @map("last_name") @db.VarChar(15)
  isActive  Boolean  @default(true) @map("is_active") @db.Boolean
  password  String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()
  tokens    Token[]
  emails    Email[]
  phones    Phone[]
  videos    Video[]

  @@map("managers")
}

// -------------------------------------------------------------------------- //

model Phone {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String   @map("user_id") @db.Uuid
  internationalCode String   @default("+55") @map("international_code") @db.VarChar(10)
  phone             String   @db.VarChar(50)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamp()

  user Manager @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("phones")
}

// -------------------------------------------------------------------------- //

model Token {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  validUntil DateTime @map("valid_until") @db.Timestamp()
  isExpired  Boolean  @default(false) @map("is_expired") @db.Boolean
  userId     String   @map("user_id") @db.Uuid
  typeId     String   @map("type_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamp()

  tokenType TokenType @relation(fields: [typeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user      Manager   @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("tokens")
}

// -------------------------------------------------------------------------- //

model TokenType {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar(15)

  tokens Token[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  @@map("token_types")
}

// *** --- students ----------------------------------------------------- *** //

model Student {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(20)
  lastName  String   @map("last_name") @db.VarChar(20)
  isActive  Boolean  @default(true) @map("is_active") @db.Boolean
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  @@map("students")
}

// *** --- content ------------------------------------------------------ *** //

model Channel {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar(50)
  description String?  @db.Text
  imageUrl    String   @map("image_url") @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp()

  videos Video[]

  @@map("channels")
}

// -------------------------------------------------------------------------- //

model Video {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String   @db.VarChar(100)
  description   String?  @db.Text
  userId        String   @map("user_id") @db.Uuid
  channelId     String   @map("channel_id") @db.Uuid
  institutionId String?  @map("institution_id") @db.Uuid
  teacherId     String?  @map("teacher_id") @db.Uuid
  subjectId     String   @map("subject_id") @db.Uuid
  thumbnail     String   @db.Text
  disabled      Boolean  @default(false) @db.Boolean
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamp()

  addedBy     Manager      @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  channel     Channel      @relation(fields: [channelId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  institution Institution? @relation(fields: [institutionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  teacher     Teacher?     @relation(fields: [teacherId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("videos")
}

// *** --- education ---------------------------------------------------- *** //

model Institution {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(100)
  website   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  videos Video[]

  @@map("institutions")
}

// -------------------------------------------------------------------------- //

model Teacher {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String?  @db.VarChar(20)
  lastName  String   @map("last_name") @db.VarChar(20)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  videos Video[]
  links  TeacherLink[]

  @@map("teachers")
}

// -------------------------------------------------------------------------- //

model Subject {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(20)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp()

  videos Video[]

  @@map("subjects")
}

// -------------------------------------------------------------------------- //

model TeacherLink {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(20)
  link      String   @db.Text
  teacherId String   @map("teacher_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp()

  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("teacher_links")
}

// -------------------------------------------------------------------------- //

model Disciplines {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar(20)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamp()

  @@map("disciplines")
}
