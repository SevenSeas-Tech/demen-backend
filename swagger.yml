openapi: 3.0.0
info:
  title: API Democratizando o Ensino
  description: Documentação da API
  version: 0.0.1

paths:
  /accounts/users/profile:
    get:
      tags:
        - Users
      summary: Ver perfil do usuário.
      description: Rota para buscar o perfil do usuário.
      security:
        - BearerAuth: []
      responses:
        201:
          description: 'Sucesso!'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithId"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        5XX:
          $ref: "#/components/responses/Unexpected"
    patch:
      tags:
        - Users
      summary: Atualizar o usuário.
      description: |
        Rota para atualizar o nome e sobrenome do usuário. Deve enviar o nome e o sobrenome,
        mesmo que não queira atualizar os dois.
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                lastName:
                  type: string
              example:
                name: foo
                lastName: bar
      responses:
        201:
          description: 'Sucesso!'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserWithId"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        5XX:
          $ref: "#/components/responses/Unexpected"

  /accounts/users:
    post:
      tags:
        - Users
      summary: Criação de Usuário
      description: Rota para criação de usuários.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        201:
          description: 'Sucesso!'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequest"
        5XX:
          $ref: "#/components/responses/Unexpected"

  /accounts/sessions:
    post:
      tags:
        - Sessions
      summary: Criação de sessão
      description: Rota para login de usuários.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        201:
          description: 'Sucesso!'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"

        400:
          $ref: "#/components/responses/BadRequest"
        5XX:
          $ref: "#/components/responses/Unexpected"


  /admin/users:
    get:
      tags:
        - Admin

      summary: Listagem de usuários.
      description: Lista todos os usuarios para um administrador.
      security:
        - BearerAuth: []
      responses:
        201:
          description: 'Sucesso!'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserWithId"
        400:
          $ref: "#/components/responses/BadRequest"
        401:
          $ref: "#/components/responses/Unauthorized"
        5XX:
          $ref: "#/components/responses/Unexpected"


components:
  schemas:
    Session:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserWithId"
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw

    Error:
      type: object
      properties:
        message:
          type: string
        status:
          type: string
      example:
        message: Something went wrong!
        status: error

    User:
      type: object
      properties:
          username:
            type: string
          email:
            type: string
            format: email
          name:
            type: string
          lastName:
            type: string
          createdAt:
            type: string
            format: date
          updatedAt:
            type: string
            format: date
      example:
        username: foobar
        email: foobar@example.com
        name: Foo
        lastName: Bar
        createdAt: 01/01/1111
        updatedAt: 01/01/1111

    UserWithId:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            id:
              type: string
              format: uuid
          example:
            id: adf8df02-cc28-4c46-9fde-ded8c574f24f

    UserDto:
      type: object
      properties:
          username:
            type: string
          email:
            type: string
            format: email
          name:
            type: string
          lastName:
            type: string
          password:
            type: string
            format: secret
      example:
        username: foobar
        email: foobar@example.com
        name: Foo
        lastName: Bar
        password: "Password13"

    Login:
      type: object
      properties:
        email:
            type: string
            format: email
        password:
            type: string
            format: secret
      example:
        email: foobar@example.com
        password: "Password13"

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unexpected:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

